import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from celery.result import AsyncResult

from app.services.celery_app import celery_app
from app.services.tasks import ping as ping_task

logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
if not TELEGRAM_TOKEN:
    logger.warning("TELEGRAM_TOKEN is empty. Bot will not start.")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TTQ_02. –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ /ping ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É Celery\n"
        "‚Ä¢ /task <code>&lt;id&gt;</code> ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏."
    )


@dp.message(Command("ping"))
async def ping_cmd(message: Message) -> None:
    task = ping_task.delay()
    await message.answer(
        f"üü¢ –ü–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É Celery: <code>{task.id}</code>\n"
        f"–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å: <code>/task {task.id}</code>"
    )


@dp.message(Command("task"))
async def task_status(message: Message) -> None:
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/task &lt;task_id&gt;</code>")
        return
    task_id = parts[1].strip()
    res = AsyncResult(task_id, app=celery_app)
    if res.successful():
        await message.answer(
            f"‚úÖ <b>{task_id}</b>\nstate: <code>{res.state}</code>\nresult: <code>{res.result}</code>"
        )
    elif res.failed():
        await message.answer(f"‚ùå <b>{task_id}</b>\nstate: <code>{res.state}</code>")
    else:
        await message.answer(f"‚è≥ <b>{task_id}</b>\nstate: <code>{res.state}</code>")


@dp.message(F.text)
async def echo(message: Message) -> None:
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: <code>{message.text}</code>")
